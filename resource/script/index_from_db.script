// index from db sample 
new function(){

	importPackage(java.lang) 
	importPackage(java.util.concurrent) 
	importPackage(net.ion.niss.webapp.loaders)
	importPackage(net.ion.framework.db.bean)
	importPackage(java.sql)
	importPackage(net.bleujin.searcher.index)
	importPackage(net.bleujin.searcher.index.rdb)

	this.handle = function(writer, session, param, rentry, jengine){
		var iid = "col1";
		var imanager = rentry.indexManager();
		
		if (! imanager.hasIndex(iid)) {
			writer.append(iid + " not exist");
			return ;
		}
		var indexer = imanager.index(iid) ;
		var rsession = rentry.login() ;
		
		var rindexer = RDBIndexBuilder.create(imanager.index(iid))
			.rdb(RDB.oracle("61.250.201.239:1521:qm10g", "bleujin", "redf").query("select * from tabs"))
			// .executors(jengine.executor()) // if you want that asynchrous handle it
			.build() ;
		
		var result = rindexer.index(new RDBIndexHandler({
			onSuccess : function(isession, rdb, rs) {
				isession.fieldIndexingStrategy(imanager.fieldIndexStrategy(rsession, iid)) ;
			
				var i = 0 ;
				while(rs.next()){
					isession.newDocument(rs.getString("table_name")).unknown("owner", "bleujin").updateVoid() ;
					if (((++i) % 3000) == 0) isession.continueUnit() ; // within 3000
				}
				writer.append(i + " committed") ;
				return i;
			}, 

			onFail : function(isession, rdb, ex) {
				writer.append(ex.getMessage()) ;
				return 0;
			}
		}));
		
		// result is future 
		writer.append('index started') ;
		return result ;
	}

} ;